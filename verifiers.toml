# TODO: Do I need something more than `container` for ensuring correct
# precedence in real-world situations when more than one filetype matches
# something and both handlers can process the type? Is such a situation a big
# enough hazard to worry about it?)

# TODO: For every fallback chain, test the relative ability of each option to
#       detect flipped bits and truncation.
[filetype.3gpp]
description = "MPEG-4 Part 12 Media (3GPP)"
extension = "3gp"
handler = "ffmpeg"

[filetype.3gpp2]
description = "MPEG-4 Part 12 Media (3GPP2)"
extension = "3g2"
handler = "ffmpeg"

[filetype.7zip]
description = "7-Zip archive"
extension = "7z"
handler = ["p7zip", "lsar"]
header = [55, 122, 188, 175, 39, 28]

[filetype.aac]
description = "AAC Audio (ADTS Stream)"
extension = "aac"
handler = "ffmpeg"

[filetype.aifc]
description = "AIFF Audio (Compressed)"
extension = "aifc"
handler = "ffmpeg"

[filetype.aiff]
description = "AIFF Audio"
extension = ["aif", "aiff"]
handler = "ffmpeg"

[filetype.ape]
description = "Monkey's Audio"
extension = "ape"
handler = "ffmpeg"

[filetype.arj]
description = "ARJ archive"
extension = "arj"
handler = ["arj", "lsar"]

[filetype.asf]
description = "Microsoft ASF"
extension = "asf"
handler = "ffmpeg"
header = [48, 38, 178, 117, 142, 102, 207, 17, 166, 217, 0, 170, 0, 98, 206, 108]

[filetype.avi]
description = "Microsoft AVI Video"
extension = "avi"
handler = "ffmpeg"

[filetype.bin]
description = ".bin"
extension = "bin"
handler = "bin"

[filetype.binhex4]
description = "BinHex4 encoded"
extension = "hqx"
handler = "binhex"

[filetype.bmp]
description = "Microsoft Device-Independent Bitmap Image"
extension = ["bmp", "dib"]
handler = "pil"

[filetype.bzip2]
description = "BZip2 compressed"
extension = "bz2"
handler = ["bz2", "p7zip", "lsar"]
header = [66, 90, 104]

[filetype.cb7]
container = "7zip"
description = "Comic Book Archive (7-Zip)"
extension = "cb7"

[filetype.cbr]
container = "rar"
description = "Comic Book Archive (RAR)"
extension = "cbr"

[filetype.cbt]
container = "tar"
description = "Comic Book Archive (Tar)"
extension = "cbt"

[filetype.cbz]
container = "zip"
description = "Comic Book Archive (Zip)"
extension = "cbz"

[filetype.dashtoc]
description = "Dash/Zeal Docset Table of Contents"
extension = "dashtoc"
handler = "json"

[filetype.dcx]
description = "Multi-page ZSoft PC Paintbrush Image"
extension = "dcx"
handler = "pil"
multipage = true

[filetype.deb]
description = "Debian Package"
extension = "deb"
handler = "p7zip"

[filetype.dmg]
description = "Apple DMG Disk Image"
extension = "dmg"
handler = "p7zip"

[filetype.docm]
container = "zip"
description = "Macro-enabled OOXML Document"
extension = "docm"

[filetype.docx]
container = "zip"
description = "OOXML Document"
extension = "docx"

[filetype.epub]
container = "zip"
description = "ePub e-book"
extension = "epub"

[filetype.f4a]
description = "FLV Audio"
extension = "f4a"
handler = "ffmpeg"

[filetype.f4b]
description = "FLV Audiobook"
extension = "f4b"
handler = "ffmpeg"

[filetype.f4v]
description = "FLV Video"
extension = "f4v"
handler = "ffmpeg"

[filetype.flac]
description = "FLAC Audio"
extension = "flac"
handler = "flac"  # TODO: Can FFmpeg be asked to check the md5sum?

[filetype.flic]
description = "Autodesk FLIC Animation"
extension = ["fli", "flc"]
handler = "pil"

[filetype.flv]
description = "Flash Video"
extension = "flv"
handler = "ffmpeg"

[filetype.gif]
description = "GIF Image"
extension = "gif"
handler = "pil"
header = [[71, 73, 70, 56, 55, 97], [71, 73, 70, 56, 57, 97]]

[filetype.gzip]
description = "GZip compressed"
extension = "gz"
handler = ["gzip", "p7zip", "lsar"]
header = [31, 139]

[filetype.innosetup_exe]
description = "Inno Setup Installer"
extension = "exe"
handler = "innoextract"

[filetype.iso_dvdisaster]
description = "ISO CD/DVD image (DVDisaster ECC)"
extension = "iso"
handler = "dvdisaster"

[filetype.jar]
container = "zip"
description = "Java ARchive"
extension = "jar"

[filetype.jpeg]
description = "JPEG/JFIF Image"
extension = ["jfi", "jfif", "jif", "jpe", "jpeg", "jpg"]
handler = "pil"
header = [255, 216, 255]

[filetype.jpeg2k]
description = "JPEG 2000 Image"
extension = ["j2k", "jp2", "jpf", "jpx"]
handler = "pil"

[filetype.json]
description = "JSON Data"
extension = "json"
handler = "json"

[filetype.lha]
description = "LHA archive"
extension = ["lha", "lzh"]
handler = ["p7zip", "lsar"]  # TODO: `lha tq {file}`

[filetype.lzip]
description = "Lzip compressed"
extension = "lz"
handler = "lzip"
header = [76, 90, 73, 80]

[filetype.lzma]
description = ".lzma compressed"
extension = "lzma"
handler = ["lzma", "p7zip", "lsar"]

[filetype.lzx]
description = "LZX archive"
extension = "lzx"
handler = "lsar"

[filetype.m4a]
description = "MPEG-4 Part 14 Audio"
extension = "m4a"
handler = "ffmpeg"

[filetype.m4b]
description = "MPEG-4 Part 14 Audiobook"
extension = "m4b"
handler = "ffmpeg"

[filetype.m4r]
description = "MPEG-4 Part 14 Ringtone"
extension = "m4r"
handler = "ffmpeg"

[filetype.m4v]
description = "MPEG-4 Part 14 Video"
extension = "m4v"
handler = "ffmpeg"

[filetype.mk3d]
description = "Matroska Video (3D)"
extension = "mk3d"
handler = "ffmpeg"

[filetype.mka]
description = "Matroska Audio"
extension = "mka"
handler = "ffmpeg"

[filetype.mkv]
description = "Matroska Video"
extension = "mkv"
handler = "ffmpeg"

[filetype.mov]
description = "Quicktime Video"
extension = "mov"
handler = "ffmpeg"

[filetype.mp1]
description = "MPEG Layer 1 Audio"
extension = "mp1"
handler = "ffmpeg"

[filetype.mp2]
description = "MPEG Layer 2 Audio"
extension = "mp2"
handler = "ffmpeg"

[filetype.mp3]
description = "MPEG Layer 3 Audio"
extension = "mp3"
handler = "ffmpeg"

[filetype.mp4]
description = "MPEG-4 Part 14 Video"
extension = "mp4"
handler = "ffmpeg"

[filetype.mpeg]
description = "MPEG Video"
extension = ["mpe", "mpeg", "mpg"]
handler = "ffmpeg"

[filetype.mpeg_ts]
description = "MPEG Transport Stream"
extension = "ts"
handler = "ffmpeg"

[filetype.mpeg_tsa]
description = "MPEG Transport Stream Audio"
extension = "tsa"
handler = "ffmpeg"

[filetype.mpeg_tsv]
description = "MPEG Transport Stream Video"
extension = "tsv"
handler = "ffmpeg"

[filetype.ms_cab]
description = "Microsoft CAB"
extension = "cab"
handler = ["cabextract", "p7zip"]  # NOTE: "lsar" reports "Unknown" with 0 exit

[filetype.ms_cursor]
description = "Microsoft Cursor"
extension = "cur"
handler = "pil"
multipage = true

[filetype.ms_ico]
description = "Microsoft Icon"
extension = "ico"
handler = "pil"
multipage = true

[filetype.msi]
description = "MSI Installer"
extension = "msi"
handler = ["p7zip", "lsar"]

[filetype.musepack]
description = "Musepack Audio"
extension = ["mp+", "mpc", "mpp"]
handler = "ffmpeg"

[filetype.odb]
container = "zip"
description = "ODF Database"
extension = "odb"

[filetype.odc]
container = "zip"
description = "ODF Chart"
extension = "odc"

[filetype.odf]
container = "zip"
description = "ODF Formula"
extension = "odf"

[filetype.odg]
container = "zip"
description = "ODF Drawing"
extension = "odg"

[filetype.odi]
container = "zip"
description = "ODF Image"
extension = "odi"

[filetype.odm]
container = "zip"
description = "ODF Master Document"
extension = "odm"

[filetype.odp]
container = "zip"
description = "ODF Presentation"
extension = "odp"

[filetype.ods]
container = "zip"
description = "ODF Spreadsheet"
extension = "ods"

[filetype.odt]
container = "zip"
description = "ODF Text Document"
extension = "odt"

[filetype.oga]
description = "Ogg containing audio (.oga)"
extension = "oga"
handler = "ffmpeg"

[filetype.ogg]
description = "Ogg Vorbis (.ogg)"
extension = "ogg"
handler = "ffmpeg"

[filetype.ogm]
description = "OGM (Ogg, Unofficial)"
extension = "ogm"
handler = "ffmpeg"

[filetype.ogv]
description = "Ogg containing video (.ogv)"
extension = "ogv"
handler = "ffmpeg"

[filetype.ogx]
description = "Ogg (unspecified) (.ogx)"
extension = "ogx"
handler = "ffmpeg"

[filetype.opus]
description = "Opus Audio"
extension = "opus"
handler = "ffmpeg"

[filetype.otc]
container = "zip"
description = "ODF Chart Template"
extension = "otc"

[filetype.otf]
container = "zip"
description = "ODF Formula Template"
extension = "otf"

[filetype.otg]
container = "zip"
description = "ODF Drawing Template"
extension = "otg"

[filetype.oth]
container = "zip"
description = "ODF Web Page Template"
extension = "oth"

[filetype.oti]
container = "zip"
description = "ODF Image Template"
extension = "oti"

[filetype.otp]
container = "zip"
description = "ODF Presentation Template"
extension = "otp"

[filetype.ots]
container = "zip"
description = "ODF Spreadsheet Template"
extension = "ots"

[filetype.ott]
container = "zip"
description = "ODF Text Document Template"
extension = "ott"

[filetype.pbm]
description = "NetPBM Portable Bitmap Image"
extension = "pbm"
handler = "pil"

[filetype.pcx]
description = "ZSoft PC Paintbrush Image"
extension = "pcx"
handler = "pil"

[filetype.pdf]
description = "PDF Document"
extension = "pdf"
handler = "pdftotext"
header = [37, 80, 68, 70]

[filetype.pgm]
description = "NetPBM Portable Graymap Image"
extension = "pgm"
handler = "pil"

[filetype.png]
description = "PNG Image"
extension = "png"
handler = "pil"
header = [137, 80, 78, 71, 13, 10, 26, 10]

[filetype.potm]
container = "zip"
description = "Macro-enabled OOXML Presentation Template"
extension = "potm"

[filetype.ppm]
description = "NetPBM Portable Pixmap Image"
extension = "ppm"
handler = "pil"

[filetype.ppsx]
container = "zip"
description = "OOXML Presentation (Self-Starting)"
extension = "ppsx"

[filetype.pptm]
container = "zip"
description = "Macro-enabled OOXML Presentation"
extension = "pptm"

[filetype.pptx]
container = "zip"
description = "OOXML Presentation"
extension = "pptx"

[filetype.py]
description = "Python Source Code"
extension = "py"
handler = "py"

[filetype.pyc]
description = "Python Bytecode"
extension = "pyc"
handler = "ignore"

[filetype.pyo]
description = "Python Bytecode (Optimized)"
extension = "pyo"
handler = "ignore"

[filetype.ra]
description = "RealAudio"
extension = "ra"
handler = "ffmpeg"

[filetype.rar]
description = "RAR archive"
extension = "rar"
handler = ["unrar", "p7zip", "lsar"]
header = [82, 97, 114, 33, 26, 7]

[filetype.rdf]
description = "RDF Document"
extension = "rdf"
handler = "xml"

[filetype.rm]
description = "RealMedia Video"
extension = "rm"
handler = "ffmpeg"

[filetype.rmvb]
description = "RealMedia Video (VBR)"
extension = "rmvb"
handler = "ffmpeg"

[filetype.rpm]
description = "RPM Package"
extension = "rpm"
handler = ["rpm", "p7zip"]

[filetype.rsn]
container = "rar"
description = "RAR-compressed SPC chiptune album"
extension = "rsn"

[filetype.rss]
description = "RSS Feed"
extension = "rss"
handler = "xml"

[filetype.rv]
description = "RealVideo"
extension = "rv"
handler = "ffmpeg"

[filetype.sea]
description = "Self-Extracting Stuffit archive"
extension = "sea"
handler = "lsar"

[filetype.shorten]
description = "Shorten Audio"
extension = "shn"
handler = "ffmpeg"

[filetype.sit]
description = "Stuffit archive"
extension = "sit"
handler = "lsar"

[filetype.speex]
description = "Speex Audio"
extension = "spx"
handler = "ffmpeg"

[filetype.sqlite3]
description = "SQLite3 Database"
extension = "sqlite3"
handler = "sqlite3"
header = [83, 81, 76, 105, 116, 101, 32, 102, 111, 114, 109, 97, 116, 32, 51, 0]

[filetype.sun_au]
description = "Sun Audio (with header)"
handler = "ffmpeg"
header = [46, 115, 110, 100]

[filetype.svg]
description = "SVG Image"
extension = "svg"
handler = "xml"

[filetype.svgz]
container = "gzip"
description = "SVG Image (GZip compressed)"
extension = "svgz"

[filetype.tar]
description = "Tar archive"
extension = "tar"
handler = ["tar", "p7zip", "lsar"]
header = [[117, 115, 116, 97, 114, 0, 48, 48], [117, 115, 116, 97, 114, 32, 32, 0]]
header_offset = 257

[filetype.targa]
description = "Truevision TGA Image"
extension = "tga"
handler = "pil"

[filetype.tbz2]
container = "bzip2"
description = "Tar archive (BZip2 compressed)"
extension = "tbz2"

[filetype.tgz]
container = "gzip"
description = "Tar archive (GZip compressed)"
extension = "tgz"

[filetype.tiff]
description = "TIFF Image"
extension = ["tif", "tiff"]
handler = "pil"

[filetype.tlz]
container = "lzma"
description = "Tar archive (.lzma compressed)"
extension = "tlz"

[filetype.txt]
description = "Plaintext"
extension = "txt"
handler = "txt"

[filetype.txz]
container = "xz"
description = "Tar archive (.xz compressed)"
extension = "txz"

[filetype.uu]
description = "UUEncoded"
extension = ["uu", "uue"]
handler = "uuencode"

[filetype.voc]
description = "Creative Labs VOC Audio"
extension = "voc"
handler = "ffmpeg"

[filetype.wave]
description = "Microsoft Waveform Audio"
extension = "wav"
handler = "ffmpeg"

[filetype.wavpack]
description = "WavPack Audio"
extension = "wv"
handler = "ffmpeg"

[filetype.webm]
description = "WebM Video"
extension = "webm"
handler = "ffmpeg"

[filetype.webp]
description = "WebP Image"
extension = "webp"
handler = "pil"

[filetype.wma]
container = "asf"
description = "Windows Media Audio"
extension = "wma"

[filetype.wmv]
container = "asf"
description = "Windows Media Video"
extension = "wmv"

[filetype.xbm]
description = "X BitMap Image"
extension = "xbm"
handler = "pil"

[filetype.xlsm]
container = "zip"
description = "Macro-enabled OOXML Workbook"
extension = "xlsm"

[filetype.xlsx]
container = "zip"
description = "OOXML Workbook"
extension = "xlsx"

[filetype.xml]
description = "XML Data"
extension = "xml"
handler = "xml"
header = [60, 63, 120, 109, 108, 32]
# TODO: Decide how to handle formats that are less rigid on their 'header'
#       format, like XML. (Maybe a flag that indicates detection shouldn't
#       complain if the extension matches but the header doesn't?)

[filetype.xpi]
container = "zip"
description = "Mozilla XPI archive"
extension = "xpi"

[filetype.xpm]
description = "X PixMap Image"
extension = "xpm"
handler = "pil"

[filetype.xz]
description = ".xz compressed"
extension = "xz"
handler = ["lzma", "p7zip", "lsar"]
header = [253, 55, 122, 88, 90, 0]

[filetype.zip]
description = "Zip archive"
extension = "zip"
handler = "zip"
header = [[80, 75, 3, 4], [80, 75, 5, 6], [80, 75, 7, 8]]

# TODO: Integrate the rest of the formats supported by lsar:
#       (https://github.com/ashang/unar#supported-old-formats)

[[override]]
path = "*/hts-cache/new.zip"
ignore = true
message = "Skipping intentionally broken HTTrack Zip file"

[[override]]
path = "*/.git"
ignore = true

# TODO: Decide how to indicate how thorough a handler is so something like
# "unpack the Zip container" isn't treated as equivalent to "unpack the Zip
# container and check the images inside the CBZ for corruption" but, at the
# same time, also come up with a way for a built-in handler to report
# "Unsupported variant of the filetype. Fall back to an external processor if
# available".

[handler.arj]
argv = ["arj", "t"]
description = "Open-source ARJ"
sources = "http://arj.sourceforge.net/"

[handler.cabextract]
argv = ["cabextract", "-t"]
sources = "https://www.cabextract.org.uk/"

[handler.dvdisaster]
argv = ["dvdisaster", "-t", "-i"]
sources = "https://en.wikipedia.org/wiki/Dvdisaster"

# TODO: Automated tests to verify that this is the best combination of
#       error-detection flags to invoke ffmpeg with.
#       - https://superuser.com/a/100290/48014
#       - https://superuser.com/q/588147/48014
#       - https://superuser.com/q/326629/48014
#       - http://www.ffmpeg-archive.org/how-to-set-flags-td936142.html
#       - https://www.reddit.com/r/DataHoarder/comments/bgsgr2/how_to_check_if_a_video_file_is_corrupted/
[handler.ffmpeg]
argv = ["ffmpeg", "-err_detect", "+crccheck+bitstream+buffer+explode",
        "-v quiet", "-xerror", "-f", "null", "-", "-i"]
description = "FFmpeg"
sources = "https://ffmpeg.org/download.html"

[handler.flac]
argv = ["flac", "-t"]
description = "The FLAC command-line utilities"
sources = "https://xiph.org/flac/download.html"

[handler.innoextract]
argv = ["innoextract", "-t", "-g"]
sources = "https://constexpr.org/innoextract/"

[handler.lsar]
argv = ["lsar", "-t"]
description = "The command-line tools for The Unarchiver"
sources = "https://theunarchiver.com/command-line"
# TODO: Maybe set fail_if_stdout = "... Unknown."

[handler.lzip]
argv = ["lzip", "-t"]
sources = "https://www.nongnu.org/lzip/lzip.html"

[handler.p7zip]
argv = ["7z", "t"]
description = "Command-line '7z' tool from 7-zip"
sources = ["https://7-zip.org/, http://p7zip.sourceforge.net/"]

[handler.pdftotext]
argv = ["pdftotext", "{path}", "{devnull}"]
description = "pdftotext from Poppler or the Xpdf command-line tools"
fail_if_stderr = "Error"
sources = ["https://linuxappfinder.com/package/poppler-utils",
           "https://www.xpdfreader.com/download.html"]

[handler.rpm]
argv = ["rpm", "--checksig"]
description = "RPM"
sources = ["https://rpm.org/", "https://www.cygwin.com/"]

[handler.unrar]
argv = ["unrar", "t"]
description = "RARLAB UnRAR"
sources = "https://www.rarlab.com/rar_add.htm"

